// node js - среда выполнения кода в не браузера

// серверная технология - позволят выполнять код js на серверах за пределами браузера

// преимущества высокая популярность - фронт и бэк - созд серверн приложение -
// установка на различные операционн системы - огромное кол-во внешних библиотек дя наших приложений
// открытй исходный код - кроссплатформенность

// клиентское и серверное приложние два разных

// NODE JS - ДЛЯ ОБРАБОТКИ ПОТОКОВЫХ ДАННЫХ В РЕАЛЬНОМ ВРЕМЕНИ
// созд api сервисов не требуют больших затрат ресурсов процессора, для запросов и ответов
// потоковая обратка данных (текст из одного места в другое в реальнои времени)

// ДЛЯ БОЛЬШИХ РЕСУРСОВ ПРОЦЕССОРА NODE JS НЕ ПОДХОДИТ (видео обработка - машинн обучение)

// глобальный объект - global не window
// не взаимод с веб браузером - нет dom
// можно исп все функции поддерж в node js - а в js нет иногда нужна конвертация на что-то новое в старое
// есть доступ к файлов систему - в js нет - те веб приложение не может созд новые файлы у клиента - удалять итд

// docker для node js Запуска
// node js помогает хорошо взаимод с операц системой - файловой - сетью - процессором

// установка node --version

// NODE REPL - интерактивный интерпретатор - в нем можно выполнять код js
// READ - прочитать код введенный ползователем
// EVALUATE - анализ и интерпретация кода
// PRINT - вывести результат в терминал
// LOOP - перейти в начало

// node - your code - .exit ====>> .help

// .help

// pwd - на путь к файлу

// ls

// cat text.txt - выводит список всех команд при наборе в repl

console.log('Hello from Node JS');

const name = 'Serge';
console.log(name);

// АРХИТЕКТУРА NODE JS
// однопоточная архитектура

// как работает?
// v8 engine - двигатель как и в браузере - выполняет код js В ОДНОМ ПОТОКЕ

// встроенные модули (JS МОДУЛИ) для взаимодействия пк и встроенн ОПЕРАЦИОННОЙ системой (файловой, сетью, процессором итд) ИХ МНОГО И НЕТ В ВЕБ БРАУЗЕРОВ
// path - os - fs - http - ЭТО НАДСТРОЙКИ НА ФУНКЦИОНАЛОМ LIBUV

// LibUV - библиотека на с++ котор обеспеч поддержку неблокирующ операция ввода - вывода - она часть NODE JS

// СХЕМА: path os fs(файл систем) http (взаимод с сетью)  (итд) - ЭТО НАДСТРОЙКА НАД libuv -> ПОСРЕДНИКи С++ BINDINGS - ЭТО СВЯЗУЮЩИЕ ЗВЕНЬЯ (c пом его происходит связь модулей с libuv) > LibUV
// c++ bindings - позвоялет коду написанн на js получать доступ к функциям написанн в библиотеке libuv

// ЕСТЬ ВНЕШНИЕ МОДУЛИ EXPRESS (созд веб сервер и  api сервисы ), MOCHA (тестирование функционала - пишем тесты ) - и ещё сотни модулей npm

// БЛАГОДАРЯ НАЛИЧИЮ LibUV МЫ МОЖЕМ ВЫПОЛНЯТЬ РАЗЛИЧНЫЕ ОПРЕАЦИИ ПО ВЗАИМОДЕЙСТВИЮ С ОПЕРЦИОННОЙ СИСТЕМОЙ - код js выполн в v8

// ПОТОКИ (THREAD) - позволяет выполнять программу и код как в  однопоточном режиме так и в многопоточном режиме - код выполняется сначала и до конца
// ПРОЦЕСС (process) - запущенная программа

// в одном процессе может быть несколько потоков 1,2,3.. 10
// запрос 1  - поток 1; запрос 2  - поток 2; запрос 3 - поток 3

// в node js есть только 1 поток - котор обрабат все запросы от клиентов
// NODE JS МОЖЕТ ВЫПОЛНЯТЬ ТОЛЬКО ОДНУ ОПЕРАЦИЮ В КАЖДЫЙ МОМЕНТ ВРЕМЕНИ И ПОКА ЭТА ОПЕРАЦИЯ ВЫПОНЯЕТСЯ - ДРУГИЕ ОЖИДАЮТ СВОЕЙ ОЧЕРЕДИ

// БЛОКИРУЮЩИЕ (операция блокирует основной поток на время) И НЕБЛОКИРУЮЩИЕ ОПЕРАЦИИ ( выполн на фоне) - реализ благодоря библиотеки Libuv
// асинхронные неблокирующие операции

// ИМЕННО БИБЛИОТЕКА LIBUV ОБЕСПЕЧИВАЕТ ПОДДЕРЖКУ АСИНХРОНН НЕ БЛОК ОПЕРАЦИЙ
// асинхронн операция это операция где мы получаем результат черз какое-то время (ms или вообще не прийти)
// не блокирующ операция - это операция котор не блокир основной и единственн поток в node js - ТЕ НАША ЗАДАЧА ВЫПОЛНЯТЬ ОПЕРАЦИИ НЕ БЛОКИРУЮЩ ОБРАЗОМ

// различные операции ввода вывода паралл в node js: запрос к базе данных - чтение и запись файла - взаимод с сетью

// ДВЕ СОСТАВЛ ЧАСТИ LIBUV
// сост из компонентов -
// ПУЛ ПОТОКОВ (THREAD POOL) И исп бля обработки блокирующи операций те котор нельзя выполн в асинхронн формате
// EVENT LOOP (ЦИКЛ СОБЫТИЙ) - в node js можно выполн асихронн операц - реализовывается с помощью callback func
